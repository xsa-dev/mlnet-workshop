// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;

namespace SampleRegression.ConsoleApp
{
    public partial class SampleRegression
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(@"Make", @"Make", outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Year", @"Year"),new InputOutputColumnPair(@"Mileage", @"Mileage")}))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"City",outputColumnName:@"City"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"State",outputColumnName:@"State"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Vin",outputColumnName:@"Vin"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Model",outputColumnName:@"Model"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Make",@"Year",@"Mileage",@"City",@"State",@"Vin",@"Model"}))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.Regression.Trainers.LbfgsPoissonRegression(new LbfgsPoissonRegressionTrainer.Options(){L1Regularization=1F,L2Regularization=1F,LabelColumnName=@"Price",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
}
